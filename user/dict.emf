;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  Author        : Detlef Groth
;  Created By    : Detlef Groth
;  Created       : Fri Apr 14 15:45:14 2023
;  Last Modified : <230415.0758>
;
;  Description   : dictionary like access to key value pairs
;
;  Notes         :
;  History       :
;
;  Copyright (c) 2023 Detlef Groth
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
define-help "dict" "3" 

cENAMEcA 

     dict - Dictionary / Hash like data structure implementation.
     
cESYNOPSIScA 

     sBdict name key [value]sA

cEDESCRIPTIONcA 

     The function dict provides a function for dictionary like data access
     using a hidden buffer and adding buffer variables to this. If the third
     argument value is not given then just the value is retrieved. Otherwise
     the value is used to set the dictionary entry.
     The output of this command is stored in the command variable .dict.value -
     so if the value is given as well the value is stored in this variable.
     
cEEXAMPLEcA

     The following example creates two dictionaries "test" and "aa" adds a
     few keys with their values and then access two of them
        
         sB
         ; create dictionary test
         dict "test" "two" 2
         dict "test" "three" 3
         dict "test" "four" 4
         ; create dictionary aa - abbrevations for amino acids
         dict "aa" "Ala" "A"
         dict "aa" "Cys" "C"
         dict "aa" "Asp" "D"
         ; access dictionary test with key two
         ; value is stored in the variable .dict.value
         dict "test" "two" 
         ; dump out the value
         500 ml-write &cat "dict is now: " .dict.value
         ; access to dictionary aa 
         dict "aa" "Cys" 
         500 ml-write &cat "Cys abbreviation is: " .dict.value
         sA

cENOTEScA

     This command is a macro defined in dict.emf. 

cESEE ALSOcA 

    lm define-macro(2)le, lm &linsert(4)le

!ehelp 

define-macro dict
    set-variable #l1 $buffer-bname
    find-buffer "*dict1"
    set-variable #l2 &cat &cat &cat ":*dict1:" @1 "-" @2
    !force set-variable #l3 @3 
    !if &not $status
        set-variable .dict.value &ind #l2
    !else
        set-variable &ind #l2 @3    
        set-variable .dict.value @3
    !endif
    find-buffer #l1
!emacro

